// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Square_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Square_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoardUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoardUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileClickedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileClickedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ProtoMessages_2eproto() {
  protobuf_AddDesc_ProtoMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Square_descriptor_ = file->message_type(0);
  static const int Square_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, squaretype_),
  };
  Square_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Square_descriptor_,
      Square::internal_default_instance(),
      Square_offsets_,
      -1,
      -1,
      -1,
      sizeof(Square),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Square, _internal_metadata_));
  Map_descriptor_ = file->message_type(1);
  static const int Map_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, numexposedsquares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, mapwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, mapheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, squares_),
  };
  Map_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Map_descriptor_,
      Map::internal_default_instance(),
      Map_offsets_,
      -1,
      -1,
      -1,
      sizeof(Map),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _internal_metadata_));
  ServerResponse_descriptor_ = file->message_type(2);
  static const int ServerResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, loginresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, boardupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, gameover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, lobbyupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, roomupdate_),
  };
  ServerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerResponse_descriptor_,
      ServerResponse::internal_default_instance(),
      ServerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerResponse, _internal_metadata_));
  RoomUpdate_descriptor_ = file->message_type(3);
  static const int RoomUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, mapupdate_),
  };
  RoomUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomUpdate_descriptor_,
      RoomUpdate::internal_default_instance(),
      RoomUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, _internal_metadata_));
  LobbyUpdate_descriptor_ = file->message_type(4);
  static const int LobbyUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUpdate, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUpdate, roomlist_),
  };
  LobbyUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LobbyUpdate_descriptor_,
      LobbyUpdate::internal_default_instance(),
      LobbyUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(LobbyUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUpdate, _internal_metadata_));
  RoomList_descriptor_ = file->message_type(5);
  static const int RoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList, numrooms_),
  };
  RoomList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomList_descriptor_,
      RoomList::internal_default_instance(),
      RoomList_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomList, _internal_metadata_));
  PlayerInfo_descriptor_ = file->message_type(6);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, score_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::internal_default_instance(),
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_));
  LoginResponse_descriptor_ = file->message_type(7);
  static const int LoginResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, token_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::internal_default_instance(),
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_));
  BoardUpdate_descriptor_ = file->message_type(8);
  static const int BoardUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardUpdate, map_),
  };
  BoardUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoardUpdate_descriptor_,
      BoardUpdate::internal_default_instance(),
      BoardUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoardUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardUpdate, _internal_metadata_));
  PlayerList_descriptor_ = file->message_type(9);
  static const int PlayerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, playerinfo_),
  };
  PlayerList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerList_descriptor_,
      PlayerList::internal_default_instance(),
      PlayerList_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, _internal_metadata_));
  GameOver_descriptor_ = file->message_type(10);
  static const int GameOver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOver, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOver, map_),
  };
  GameOver_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameOver_descriptor_,
      GameOver::internal_default_instance(),
      GameOver_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameOver),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOver, _internal_metadata_));
  ClientRequest_descriptor_ = file->message_type(11);
  static const int ClientRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, loginrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, createroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, joinroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, quitgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, tileclicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, testrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, quitroom_),
  };
  ClientRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::internal_default_instance(),
      ClientRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _internal_metadata_));
  QuitRoom_descriptor_ = file->message_type(12);
  static const int QuitRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoom, token_),
  };
  QuitRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuitRoom_descriptor_,
      QuitRoom::internal_default_instance(),
      QuitRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuitRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoom, _internal_metadata_));
  TestRequest_descriptor_ = file->message_type(13);
  static const int TestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, token_),
  };
  TestRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestRequest_descriptor_,
      TestRequest::internal_default_instance(),
      TestRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _internal_metadata_));
  QuitGameRequest_descriptor_ = file->message_type(14);
  static const int QuitGameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGameRequest, token_),
  };
  QuitGameRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuitGameRequest_descriptor_,
      QuitGameRequest::internal_default_instance(),
      QuitGameRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuitGameRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGameRequest, _internal_metadata_));
  TileClickedRequest_descriptor_ = file->message_type(15);
  static const int TileClickedRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileClickedRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileClickedRequest, tileindex_),
  };
  TileClickedRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TileClickedRequest_descriptor_,
      TileClickedRequest::internal_default_instance(),
      TileClickedRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TileClickedRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileClickedRequest, _internal_metadata_));
  JoinRoomRequest_descriptor_ = file->message_type(16);
  static const int JoinRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRequest, roomnumber_),
  };
  JoinRoomRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinRoomRequest_descriptor_,
      JoinRoomRequest::internal_default_instance(),
      JoinRoomRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinRoomRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRequest, _internal_metadata_));
  CreateRoomRequest_descriptor_ = file->message_type(17);
  static const int CreateRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, token_),
  };
  CreateRoomRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateRoomRequest_descriptor_,
      CreateRoomRequest::internal_default_instance(),
      CreateRoomRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateRoomRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRequest, _internal_metadata_));
  LoginRequest_descriptor_ = file->message_type(18);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::internal_default_instance(),
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_));
  GameState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Square_descriptor_, Square::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Map_descriptor_, Map::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerResponse_descriptor_, ServerResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomUpdate_descriptor_, RoomUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LobbyUpdate_descriptor_, LobbyUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomList_descriptor_, RoomList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, PlayerInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, LoginResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoardUpdate_descriptor_, BoardUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerList_descriptor_, PlayerList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameOver_descriptor_, GameOver::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientRequest_descriptor_, ClientRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuitRoom_descriptor_, QuitRoom::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestRequest_descriptor_, TestRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuitGameRequest_descriptor_, QuitGameRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TileClickedRequest_descriptor_, TileClickedRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinRoomRequest_descriptor_, JoinRoomRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRoomRequest_descriptor_, CreateRoomRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, LoginRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMessages_2eproto() {
  Square_default_instance_.Shutdown();
  delete Square_reflection_;
  Map_default_instance_.Shutdown();
  delete Map_reflection_;
  ServerResponse_default_instance_.Shutdown();
  delete ServerResponse_reflection_;
  RoomUpdate_default_instance_.Shutdown();
  delete RoomUpdate_reflection_;
  LobbyUpdate_default_instance_.Shutdown();
  delete LobbyUpdate_reflection_;
  RoomList_default_instance_.Shutdown();
  delete RoomList_reflection_;
  PlayerInfo_default_instance_.Shutdown();
  delete PlayerInfo_reflection_;
  LoginResponse_default_instance_.Shutdown();
  delete LoginResponse_reflection_;
  BoardUpdate_default_instance_.Shutdown();
  delete BoardUpdate_reflection_;
  PlayerList_default_instance_.Shutdown();
  delete PlayerList_reflection_;
  GameOver_default_instance_.Shutdown();
  delete GameOver_reflection_;
  ClientRequest_default_instance_.Shutdown();
  delete ClientRequest_reflection_;
  QuitRoom_default_instance_.Shutdown();
  delete QuitRoom_reflection_;
  TestRequest_default_instance_.Shutdown();
  delete TestRequest_reflection_;
  QuitGameRequest_default_instance_.Shutdown();
  delete QuitGameRequest_reflection_;
  TileClickedRequest_default_instance_.Shutdown();
  delete TileClickedRequest_reflection_;
  JoinRoomRequest_default_instance_.Shutdown();
  delete JoinRoomRequest_reflection_;
  CreateRoomRequest_default_instance_.Shutdown();
  delete CreateRoomRequest_reflection_;
  LoginRequest_default_instance_.Shutdown();
  delete LoginRequest_reflection_;
}

void protobuf_InitDefaults_ProtoMessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Square_default_instance_.DefaultConstruct();
  Map_default_instance_.DefaultConstruct();
  ServerResponse_default_instance_.DefaultConstruct();
  RoomUpdate_default_instance_.DefaultConstruct();
  LobbyUpdate_default_instance_.DefaultConstruct();
  RoomList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlayerInfo_default_instance_.DefaultConstruct();
  LoginResponse_default_instance_.DefaultConstruct();
  BoardUpdate_default_instance_.DefaultConstruct();
  PlayerList_default_instance_.DefaultConstruct();
  GameOver_default_instance_.DefaultConstruct();
  ClientRequest_default_instance_.DefaultConstruct();
  QuitRoom_default_instance_.DefaultConstruct();
  TestRequest_default_instance_.DefaultConstruct();
  QuitGameRequest_default_instance_.DefaultConstruct();
  TileClickedRequest_default_instance_.DefaultConstruct();
  JoinRoomRequest_default_instance_.DefaultConstruct();
  CreateRoomRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginRequest_default_instance_.DefaultConstruct();
  Square_default_instance_.get_mutable()->InitAsDefaultInstance();
  Map_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RoomUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  LobbyUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  RoomList_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlayerInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BoardUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlayerList_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameOver_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuitRoom_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  QuitGameRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  TileClickedRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  JoinRoomRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateRoomRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ProtoMessages_2eproto_once_);
void protobuf_InitDefaults_ProtoMessages_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ProtoMessages_2eproto_once_,
                 &protobuf_InitDefaults_ProtoMessages_2eproto_impl);
}
void protobuf_AddDesc_ProtoMessages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ProtoMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoMessages.proto\022\005Proto\"\034\n\006Square\022\022"
    "\n\nsquareType\030\001 \001(\005\"e\n\003Map\022\031\n\021numExposedS"
    "quares\030\001 \001(\005\022\020\n\010mapWidth\030\002 \001(\005\022\021\n\tmapHei"
    "ght\030\003 \001(\005\022\036\n\007squares\030\004 \003(\0132\r.Proto.Squar"
    "e\"\245\002\n\016ServerResponse\022+\n\rloginResponse\030\001 "
    "\001(\0132\024.Proto.LoginResponse\022%\n\nplayerList\030"
    "\002 \001(\0132\021.Proto.PlayerList\022#\n\tgameState\030\003 "
    "\001(\0162\020.Proto.GameState\022\'\n\013boardUpdate\030\004 \001"
    "(\0132\022.Proto.BoardUpdate\022!\n\010gameOver\030\005 \001(\013"
    "2\017.Proto.GameOver\022\'\n\013lobbyUpdate\030\006 \001(\0132\022"
    ".Proto.LobbyUpdate\022%\n\nroomUpdate\030\007 \001(\0132\021"
    ".Proto.RoomUpdate\"R\n\nRoomUpdate\022%\n\nplaye"
    "rList\030\001 \001(\0132\021.Proto.PlayerList\022\035\n\tmapUpd"
    "ate\030\002 \001(\0132\n.Proto.Map\"W\n\013LobbyUpdate\022%\n\n"
    "playerList\030\001 \001(\0132\021.Proto.PlayerList\022!\n\010r"
    "oomList\030\002 \001(\0132\017.Proto.RoomList\"\034\n\010RoomLi"
    "st\022\020\n\010numRooms\030\001 \001(\005\")\n\nPlayerInfo\022\014\n\004na"
    "me\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\"\036\n\rLoginResponse"
    "\022\r\n\005token\030\001 \001(\005\"&\n\013BoardUpdate\022\027\n\003map\030\001 "
    "\001(\0132\n.Proto.Map\"3\n\nPlayerList\022%\n\nplayerI"
    "nfo\030\001 \003(\0132\021.Proto.PlayerInfo\"J\n\010GameOver"
    "\022%\n\nplayerList\030\001 \001(\0132\021.Proto.PlayerList\022"
    "\027\n\003map\030\002 \001(\0132\n.Proto.Map\"\270\002\n\rClientReque"
    "st\022)\n\014loginRequest\030\001 \001(\0132\023.Proto.LoginRe"
    "quest\022,\n\ncreateRoom\030\002 \001(\0132\030.Proto.Create"
    "RoomRequest\022(\n\010joinRoom\030\003 \001(\0132\026.Proto.Jo"
    "inRoomRequest\022(\n\010quitGame\030\004 \001(\0132\026.Proto."
    "QuitGameRequest\022.\n\013tileClicked\030\005 \001(\0132\031.P"
    "roto.TileClickedRequest\022\'\n\013testRequest\030\006"
    " \001(\0132\022.Proto.TestRequest\022!\n\010quitRoom\030\007 \001"
    "(\0132\017.Proto.QuitRoom\"\031\n\010QuitRoom\022\r\n\005token"
    "\030\001 \001(\005\"\034\n\013TestRequest\022\r\n\005token\030\001 \001(\005\" \n\017"
    "QuitGameRequest\022\r\n\005token\030\001 \001(\005\"6\n\022TileCl"
    "ickedRequest\022\r\n\005token\030\001 \001(\005\022\021\n\ttileIndex"
    "\030\002 \001(\005\"4\n\017JoinRoomRequest\022\r\n\005token\030\001 \001(\005"
    "\022\022\n\nroomNumber\030\002 \001(\005\"\"\n\021CreateRoomReques"
    "t\022\r\n\005token\030\001 \001(\005\"/\n\014LoginRequest\022\r\n\005logi"
    "n\030\001 \001(\t\022\020\n\010password\030\002 \001(\t*\?\n\tGameState\022\010"
    "\n\004NONE\020\000\022\t\n\005LOGIN\020\001\022\t\n\005LOBBY\020\002\022\010\n\004GAME\020\003"
    "\022\010\n\004OVER\020\004b\006proto3", 1578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMessages_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ProtoMessages_2eproto_once_);
void protobuf_AddDesc_ProtoMessages_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ProtoMessages_2eproto_once_,
                 &protobuf_AddDesc_ProtoMessages_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMessages_2eproto {
  StaticDescriptorInitializer_ProtoMessages_2eproto() {
    protobuf_AddDesc_ProtoMessages_2eproto();
  }
} static_descriptor_initializer_ProtoMessages_2eproto_;
const ::google::protobuf::EnumDescriptor* GameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}
bool GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Square::kSquareTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Square::Square()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Square)
}

void Square::InitAsDefaultInstance() {
}

Square::Square(const Square& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.Square)
}

void Square::SharedCtor() {
  squaretype_ = 0;
  _cached_size_ = 0;
}

Square::~Square() {
  // @@protoc_insertion_point(destructor:Proto.Square)
  SharedDtor();
}

void Square::SharedDtor() {
}

void Square::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Square::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Square_descriptor_;
}

const Square& Square::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Square> Square_default_instance_;

Square* Square::New(::google::protobuf::Arena* arena) const {
  Square* n = new Square;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Square::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Square)
  squaretype_ = 0;
}

bool Square::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Square)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 squareType = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &squaretype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Square)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Square)
  return false;
#undef DO_
}

void Square::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Square)
  // optional int32 squareType = 1;
  if (this->squaretype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->squaretype(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.Square)
}

::google::protobuf::uint8* Square::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Square)
  // optional int32 squareType = 1;
  if (this->squaretype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->squaretype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.Square)
  return target;
}

size_t Square::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Square)
  size_t total_size = 0;

  // optional int32 squareType = 1;
  if (this->squaretype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->squaretype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Square::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Square)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Square* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Square>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Square)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Square)
    UnsafeMergeFrom(*source);
  }
}

void Square::MergeFrom(const Square& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Square)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Square::UnsafeMergeFrom(const Square& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.squaretype() != 0) {
    set_squaretype(from.squaretype());
  }
}

void Square::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Square)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Square::CopyFrom(const Square& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Square)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Square::IsInitialized() const {

  return true;
}

void Square::Swap(Square* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Square::InternalSwap(Square* other) {
  std::swap(squaretype_, other->squaretype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Square::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Square_descriptor_;
  metadata.reflection = Square_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Square

// optional int32 squareType = 1;
void Square::clear_squaretype() {
  squaretype_ = 0;
}
::google::protobuf::int32 Square::squaretype() const {
  // @@protoc_insertion_point(field_get:Proto.Square.squareType)
  return squaretype_;
}
void Square::set_squaretype(::google::protobuf::int32 value) {
  
  squaretype_ = value;
  // @@protoc_insertion_point(field_set:Proto.Square.squareType)
}

inline const Square* Square::internal_default_instance() {
  return &Square_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kNumExposedSquaresFieldNumber;
const int Map::kMapWidthFieldNumber;
const int Map::kMapHeightFieldNumber;
const int Map::kSquaresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Map)
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.Map)
}

void Map::SharedCtor() {
  ::memset(&numexposedsquares_, 0, reinterpret_cast<char*>(&mapheight_) -
    reinterpret_cast<char*>(&numexposedsquares_) + sizeof(mapheight_));
  _cached_size_ = 0;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:Proto.Map)
  SharedDtor();
}

void Map::SharedDtor() {
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Map> Map_default_instance_;

Map* Map::New(::google::protobuf::Arena* arena) const {
  Map* n = new Map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Map)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Map, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Map*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(numexposedsquares_, mapheight_);

#undef ZR_HELPER_
#undef ZR_

  squares_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numExposedSquares = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numexposedsquares_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapWidth;
        break;
      }

      // optional int32 mapWidth = 2;
      case 2: {
        if (tag == 16) {
         parse_mapWidth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapwidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapHeight;
        break;
      }

      // optional int32 mapHeight = 3;
      case 3: {
        if (tag == 24) {
         parse_mapHeight:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapheight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_squares;
        break;
      }

      // repeated .Proto.Square squares = 4;
      case 4: {
        if (tag == 34) {
         parse_squares:
          DO_(input->IncrementRecursionDepth());
         parse_loop_squares:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_squares()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_squares;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Map)
  // optional int32 numExposedSquares = 1;
  if (this->numexposedsquares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numexposedsquares(), output);
  }

  // optional int32 mapWidth = 2;
  if (this->mapwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapwidth(), output);
  }

  // optional int32 mapHeight = 3;
  if (this->mapheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapheight(), output);
  }

  // repeated .Proto.Square squares = 4;
  for (unsigned int i = 0, n = this->squares_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->squares(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Map)
  // optional int32 numExposedSquares = 1;
  if (this->numexposedsquares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numexposedsquares(), target);
  }

  // optional int32 mapWidth = 2;
  if (this->mapwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapwidth(), target);
  }

  // optional int32 mapHeight = 3;
  if (this->mapheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapheight(), target);
  }

  // repeated .Proto.Square squares = 4;
  for (unsigned int i = 0, n = this->squares_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->squares(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Map)
  size_t total_size = 0;

  // optional int32 numExposedSquares = 1;
  if (this->numexposedsquares() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numexposedsquares());
  }

  // optional int32 mapWidth = 2;
  if (this->mapwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapwidth());
  }

  // optional int32 mapHeight = 3;
  if (this->mapheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapheight());
  }

  // repeated .Proto.Square squares = 4;
  {
    unsigned int count = this->squares_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->squares(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Map)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Map)
    UnsafeMergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Map)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Map::UnsafeMergeFrom(const Map& from) {
  GOOGLE_DCHECK(&from != this);
  squares_.MergeFrom(from.squares_);
  if (from.numexposedsquares() != 0) {
    set_numexposedsquares(from.numexposedsquares());
  }
  if (from.mapwidth() != 0) {
    set_mapwidth(from.mapwidth());
  }
  if (from.mapheight() != 0) {
    set_mapheight(from.mapheight());
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Map)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Map::IsInitialized() const {

  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  std::swap(numexposedsquares_, other->numexposedsquares_);
  std::swap(mapwidth_, other->mapwidth_);
  std::swap(mapheight_, other->mapheight_);
  squares_.UnsafeArenaSwap(&other->squares_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Map

// optional int32 numExposedSquares = 1;
void Map::clear_numexposedsquares() {
  numexposedsquares_ = 0;
}
::google::protobuf::int32 Map::numexposedsquares() const {
  // @@protoc_insertion_point(field_get:Proto.Map.numExposedSquares)
  return numexposedsquares_;
}
void Map::set_numexposedsquares(::google::protobuf::int32 value) {
  
  numexposedsquares_ = value;
  // @@protoc_insertion_point(field_set:Proto.Map.numExposedSquares)
}

// optional int32 mapWidth = 2;
void Map::clear_mapwidth() {
  mapwidth_ = 0;
}
::google::protobuf::int32 Map::mapwidth() const {
  // @@protoc_insertion_point(field_get:Proto.Map.mapWidth)
  return mapwidth_;
}
void Map::set_mapwidth(::google::protobuf::int32 value) {
  
  mapwidth_ = value;
  // @@protoc_insertion_point(field_set:Proto.Map.mapWidth)
}

// optional int32 mapHeight = 3;
void Map::clear_mapheight() {
  mapheight_ = 0;
}
::google::protobuf::int32 Map::mapheight() const {
  // @@protoc_insertion_point(field_get:Proto.Map.mapHeight)
  return mapheight_;
}
void Map::set_mapheight(::google::protobuf::int32 value) {
  
  mapheight_ = value;
  // @@protoc_insertion_point(field_set:Proto.Map.mapHeight)
}

// repeated .Proto.Square squares = 4;
int Map::squares_size() const {
  return squares_.size();
}
void Map::clear_squares() {
  squares_.Clear();
}
const ::Proto::Square& Map::squares(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Map.squares)
  return squares_.Get(index);
}
::Proto::Square* Map::mutable_squares(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Map.squares)
  return squares_.Mutable(index);
}
::Proto::Square* Map::add_squares() {
  // @@protoc_insertion_point(field_add:Proto.Map.squares)
  return squares_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::Square >*
Map::mutable_squares() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Map.squares)
  return &squares_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::Square >&
Map::squares() const {
  // @@protoc_insertion_point(field_list:Proto.Map.squares)
  return squares_;
}

inline const Map* Map::internal_default_instance() {
  return &Map_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerResponse::kLoginResponseFieldNumber;
const int ServerResponse::kPlayerListFieldNumber;
const int ServerResponse::kGameStateFieldNumber;
const int ServerResponse::kBoardUpdateFieldNumber;
const int ServerResponse::kGameOverFieldNumber;
const int ServerResponse::kLobbyUpdateFieldNumber;
const int ServerResponse::kRoomUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerResponse::ServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ServerResponse)
}

void ServerResponse::InitAsDefaultInstance() {
  loginresponse_ = const_cast< ::Proto::LoginResponse*>(
      ::Proto::LoginResponse::internal_default_instance());
  playerlist_ = const_cast< ::Proto::PlayerList*>(
      ::Proto::PlayerList::internal_default_instance());
  boardupdate_ = const_cast< ::Proto::BoardUpdate*>(
      ::Proto::BoardUpdate::internal_default_instance());
  gameover_ = const_cast< ::Proto::GameOver*>(
      ::Proto::GameOver::internal_default_instance());
  lobbyupdate_ = const_cast< ::Proto::LobbyUpdate*>(
      ::Proto::LobbyUpdate::internal_default_instance());
  roomupdate_ = const_cast< ::Proto::RoomUpdate*>(
      ::Proto::RoomUpdate::internal_default_instance());
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.ServerResponse)
}

void ServerResponse::SharedCtor() {
  loginresponse_ = NULL;
  playerlist_ = NULL;
  boardupdate_ = NULL;
  gameover_ = NULL;
  lobbyupdate_ = NULL;
  roomupdate_ = NULL;
  gamestate_ = 0;
  _cached_size_ = 0;
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:Proto.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  if (this != &ServerResponse_default_instance_.get()) {
    delete loginresponse_;
    delete playerlist_;
    delete boardupdate_;
    delete gameover_;
    delete lobbyupdate_;
    delete roomupdate_;
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerResponse_descriptor_;
}

const ServerResponse& ServerResponse::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerResponse> ServerResponse_default_instance_;

ServerResponse* ServerResponse::New(::google::protobuf::Arena* arena) const {
  ServerResponse* n = new ServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ServerResponse)
  if (GetArenaNoVirtual() == NULL && loginresponse_ != NULL) delete loginresponse_;
  loginresponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
  gamestate_ = 0;
  if (GetArenaNoVirtual() == NULL && boardupdate_ != NULL) delete boardupdate_;
  boardupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && gameover_ != NULL) delete gameover_;
  gameover_ = NULL;
  if (GetArenaNoVirtual() == NULL && lobbyupdate_ != NULL) delete lobbyupdate_;
  lobbyupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && roomupdate_ != NULL) delete roomupdate_;
  roomupdate_ = NULL;
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.LoginResponse loginResponse = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerList;
        break;
      }

      // optional .Proto.PlayerList playerList = 2;
      case 2: {
        if (tag == 18) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }

      // optional .Proto.GameState gameState = 3;
      case 3: {
        if (tag == 24) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamestate(static_cast< ::Proto::GameState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_boardUpdate;
        break;
      }

      // optional .Proto.BoardUpdate boardUpdate = 4;
      case 4: {
        if (tag == 34) {
         parse_boardUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boardupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gameOver;
        break;
      }

      // optional .Proto.GameOver gameOver = 5;
      case 5: {
        if (tag == 42) {
         parse_gameOver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lobbyUpdate;
        break;
      }

      // optional .Proto.LobbyUpdate lobbyUpdate = 6;
      case 6: {
        if (tag == 50) {
         parse_lobbyUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobbyupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_roomUpdate;
        break;
      }

      // optional .Proto.RoomUpdate roomUpdate = 7;
      case 7: {
        if (tag == 58) {
         parse_roomUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ServerResponse)
  // optional .Proto.LoginResponse loginResponse = 1;
  if (this->has_loginresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loginresponse_, output);
  }

  // optional .Proto.PlayerList playerList = 2;
  if (this->has_playerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerlist_, output);
  }

  // optional .Proto.GameState gameState = 3;
  if (this->gamestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // optional .Proto.BoardUpdate boardUpdate = 4;
  if (this->has_boardupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->boardupdate_, output);
  }

  // optional .Proto.GameOver gameOver = 5;
  if (this->has_gameover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gameover_, output);
  }

  // optional .Proto.LobbyUpdate lobbyUpdate = 6;
  if (this->has_lobbyupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->lobbyupdate_, output);
  }

  // optional .Proto.RoomUpdate roomUpdate = 7;
  if (this->has_roomupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->roomupdate_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.ServerResponse)
}

::google::protobuf::uint8* ServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ServerResponse)
  // optional .Proto.LoginResponse loginResponse = 1;
  if (this->has_loginresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->loginresponse_, false, target);
  }

  // optional .Proto.PlayerList playerList = 2;
  if (this->has_playerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->playerlist_, false, target);
  }

  // optional .Proto.GameState gameState = 3;
  if (this->gamestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamestate(), target);
  }

  // optional .Proto.BoardUpdate boardUpdate = 4;
  if (this->has_boardupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->boardupdate_, false, target);
  }

  // optional .Proto.GameOver gameOver = 5;
  if (this->has_gameover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gameover_, false, target);
  }

  // optional .Proto.LobbyUpdate lobbyUpdate = 6;
  if (this->has_lobbyupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->lobbyupdate_, false, target);
  }

  // optional .Proto.RoomUpdate roomUpdate = 7;
  if (this->has_roomupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->roomupdate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ServerResponse)
  size_t total_size = 0;

  // optional .Proto.LoginResponse loginResponse = 1;
  if (this->has_loginresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loginresponse_);
  }

  // optional .Proto.PlayerList playerList = 2;
  if (this->has_playerlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerlist_);
  }

  // optional .Proto.GameState gameState = 3;
  if (this->gamestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  // optional .Proto.BoardUpdate boardUpdate = 4;
  if (this->has_boardupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->boardupdate_);
  }

  // optional .Proto.GameOver gameOver = 5;
  if (this->has_gameover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameover_);
  }

  // optional .Proto.LobbyUpdate lobbyUpdate = 6;
  if (this->has_lobbyupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lobbyupdate_);
  }

  // optional .Proto.RoomUpdate roomUpdate = 7;
  if (this->has_roomupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomupdate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ServerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ServerResponse)
    UnsafeMergeFrom(*source);
  }
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ServerResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerResponse::UnsafeMergeFrom(const ServerResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_loginresponse()) {
    mutable_loginresponse()->::Proto::LoginResponse::MergeFrom(from.loginresponse());
  }
  if (from.has_playerlist()) {
    mutable_playerlist()->::Proto::PlayerList::MergeFrom(from.playerlist());
  }
  if (from.gamestate() != 0) {
    set_gamestate(from.gamestate());
  }
  if (from.has_boardupdate()) {
    mutable_boardupdate()->::Proto::BoardUpdate::MergeFrom(from.boardupdate());
  }
  if (from.has_gameover()) {
    mutable_gameover()->::Proto::GameOver::MergeFrom(from.gameover());
  }
  if (from.has_lobbyupdate()) {
    mutable_lobbyupdate()->::Proto::LobbyUpdate::MergeFrom(from.lobbyupdate());
  }
  if (from.has_roomupdate()) {
    mutable_roomupdate()->::Proto::RoomUpdate::MergeFrom(from.roomupdate());
  }
}

void ServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ServerResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerResponse::IsInitialized() const {

  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerResponse::InternalSwap(ServerResponse* other) {
  std::swap(loginresponse_, other->loginresponse_);
  std::swap(playerlist_, other->playerlist_);
  std::swap(gamestate_, other->gamestate_);
  std::swap(boardupdate_, other->boardupdate_);
  std::swap(gameover_, other->gameover_);
  std::swap(lobbyupdate_, other->lobbyupdate_);
  std::swap(roomupdate_, other->roomupdate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerResponse_descriptor_;
  metadata.reflection = ServerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerResponse

// optional .Proto.LoginResponse loginResponse = 1;
bool ServerResponse::has_loginresponse() const {
  return this != internal_default_instance() && loginresponse_ != NULL;
}
void ServerResponse::clear_loginresponse() {
  if (GetArenaNoVirtual() == NULL && loginresponse_ != NULL) delete loginresponse_;
  loginresponse_ = NULL;
}
const ::Proto::LoginResponse& ServerResponse::loginresponse() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.loginResponse)
  return loginresponse_ != NULL ? *loginresponse_
                         : *::Proto::LoginResponse::internal_default_instance();
}
::Proto::LoginResponse* ServerResponse::mutable_loginresponse() {
  
  if (loginresponse_ == NULL) {
    loginresponse_ = new ::Proto::LoginResponse;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.loginResponse)
  return loginresponse_;
}
::Proto::LoginResponse* ServerResponse::release_loginresponse() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.loginResponse)
  
  ::Proto::LoginResponse* temp = loginresponse_;
  loginresponse_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_loginresponse(::Proto::LoginResponse* loginresponse) {
  delete loginresponse_;
  loginresponse_ = loginresponse;
  if (loginresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.loginResponse)
}

// optional .Proto.PlayerList playerList = 2;
bool ServerResponse::has_playerlist() const {
  return this != internal_default_instance() && playerlist_ != NULL;
}
void ServerResponse::clear_playerlist() {
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
}
const ::Proto::PlayerList& ServerResponse::playerlist() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.playerList)
  return playerlist_ != NULL ? *playerlist_
                         : *::Proto::PlayerList::internal_default_instance();
}
::Proto::PlayerList* ServerResponse::mutable_playerlist() {
  
  if (playerlist_ == NULL) {
    playerlist_ = new ::Proto::PlayerList;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.playerList)
  return playerlist_;
}
::Proto::PlayerList* ServerResponse::release_playerlist() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.playerList)
  
  ::Proto::PlayerList* temp = playerlist_;
  playerlist_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_playerlist(::Proto::PlayerList* playerlist) {
  delete playerlist_;
  playerlist_ = playerlist;
  if (playerlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.playerList)
}

// optional .Proto.GameState gameState = 3;
void ServerResponse::clear_gamestate() {
  gamestate_ = 0;
}
::Proto::GameState ServerResponse::gamestate() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.gameState)
  return static_cast< ::Proto::GameState >(gamestate_);
}
void ServerResponse::set_gamestate(::Proto::GameState value) {
  
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:Proto.ServerResponse.gameState)
}

// optional .Proto.BoardUpdate boardUpdate = 4;
bool ServerResponse::has_boardupdate() const {
  return this != internal_default_instance() && boardupdate_ != NULL;
}
void ServerResponse::clear_boardupdate() {
  if (GetArenaNoVirtual() == NULL && boardupdate_ != NULL) delete boardupdate_;
  boardupdate_ = NULL;
}
const ::Proto::BoardUpdate& ServerResponse::boardupdate() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.boardUpdate)
  return boardupdate_ != NULL ? *boardupdate_
                         : *::Proto::BoardUpdate::internal_default_instance();
}
::Proto::BoardUpdate* ServerResponse::mutable_boardupdate() {
  
  if (boardupdate_ == NULL) {
    boardupdate_ = new ::Proto::BoardUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.boardUpdate)
  return boardupdate_;
}
::Proto::BoardUpdate* ServerResponse::release_boardupdate() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.boardUpdate)
  
  ::Proto::BoardUpdate* temp = boardupdate_;
  boardupdate_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_boardupdate(::Proto::BoardUpdate* boardupdate) {
  delete boardupdate_;
  boardupdate_ = boardupdate;
  if (boardupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.boardUpdate)
}

// optional .Proto.GameOver gameOver = 5;
bool ServerResponse::has_gameover() const {
  return this != internal_default_instance() && gameover_ != NULL;
}
void ServerResponse::clear_gameover() {
  if (GetArenaNoVirtual() == NULL && gameover_ != NULL) delete gameover_;
  gameover_ = NULL;
}
const ::Proto::GameOver& ServerResponse::gameover() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.gameOver)
  return gameover_ != NULL ? *gameover_
                         : *::Proto::GameOver::internal_default_instance();
}
::Proto::GameOver* ServerResponse::mutable_gameover() {
  
  if (gameover_ == NULL) {
    gameover_ = new ::Proto::GameOver;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.gameOver)
  return gameover_;
}
::Proto::GameOver* ServerResponse::release_gameover() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.gameOver)
  
  ::Proto::GameOver* temp = gameover_;
  gameover_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_gameover(::Proto::GameOver* gameover) {
  delete gameover_;
  gameover_ = gameover;
  if (gameover) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.gameOver)
}

// optional .Proto.LobbyUpdate lobbyUpdate = 6;
bool ServerResponse::has_lobbyupdate() const {
  return this != internal_default_instance() && lobbyupdate_ != NULL;
}
void ServerResponse::clear_lobbyupdate() {
  if (GetArenaNoVirtual() == NULL && lobbyupdate_ != NULL) delete lobbyupdate_;
  lobbyupdate_ = NULL;
}
const ::Proto::LobbyUpdate& ServerResponse::lobbyupdate() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.lobbyUpdate)
  return lobbyupdate_ != NULL ? *lobbyupdate_
                         : *::Proto::LobbyUpdate::internal_default_instance();
}
::Proto::LobbyUpdate* ServerResponse::mutable_lobbyupdate() {
  
  if (lobbyupdate_ == NULL) {
    lobbyupdate_ = new ::Proto::LobbyUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.lobbyUpdate)
  return lobbyupdate_;
}
::Proto::LobbyUpdate* ServerResponse::release_lobbyupdate() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.lobbyUpdate)
  
  ::Proto::LobbyUpdate* temp = lobbyupdate_;
  lobbyupdate_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_lobbyupdate(::Proto::LobbyUpdate* lobbyupdate) {
  delete lobbyupdate_;
  lobbyupdate_ = lobbyupdate;
  if (lobbyupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.lobbyUpdate)
}

// optional .Proto.RoomUpdate roomUpdate = 7;
bool ServerResponse::has_roomupdate() const {
  return this != internal_default_instance() && roomupdate_ != NULL;
}
void ServerResponse::clear_roomupdate() {
  if (GetArenaNoVirtual() == NULL && roomupdate_ != NULL) delete roomupdate_;
  roomupdate_ = NULL;
}
const ::Proto::RoomUpdate& ServerResponse::roomupdate() const {
  // @@protoc_insertion_point(field_get:Proto.ServerResponse.roomUpdate)
  return roomupdate_ != NULL ? *roomupdate_
                         : *::Proto::RoomUpdate::internal_default_instance();
}
::Proto::RoomUpdate* ServerResponse::mutable_roomupdate() {
  
  if (roomupdate_ == NULL) {
    roomupdate_ = new ::Proto::RoomUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ServerResponse.roomUpdate)
  return roomupdate_;
}
::Proto::RoomUpdate* ServerResponse::release_roomupdate() {
  // @@protoc_insertion_point(field_release:Proto.ServerResponse.roomUpdate)
  
  ::Proto::RoomUpdate* temp = roomupdate_;
  roomupdate_ = NULL;
  return temp;
}
void ServerResponse::set_allocated_roomupdate(::Proto::RoomUpdate* roomupdate) {
  delete roomupdate_;
  roomupdate_ = roomupdate;
  if (roomupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ServerResponse.roomUpdate)
}

inline const ServerResponse* ServerResponse::internal_default_instance() {
  return &ServerResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomUpdate::kPlayerListFieldNumber;
const int RoomUpdate::kMapUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomUpdate::RoomUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RoomUpdate)
}

void RoomUpdate::InitAsDefaultInstance() {
  playerlist_ = const_cast< ::Proto::PlayerList*>(
      ::Proto::PlayerList::internal_default_instance());
  mapupdate_ = const_cast< ::Proto::Map*>(
      ::Proto::Map::internal_default_instance());
}

RoomUpdate::RoomUpdate(const RoomUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.RoomUpdate)
}

void RoomUpdate::SharedCtor() {
  playerlist_ = NULL;
  mapupdate_ = NULL;
  _cached_size_ = 0;
}

RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:Proto.RoomUpdate)
  SharedDtor();
}

void RoomUpdate::SharedDtor() {
  if (this != &RoomUpdate_default_instance_.get()) {
    delete playerlist_;
    delete mapupdate_;
  }
}

void RoomUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomUpdate_descriptor_;
}

const RoomUpdate& RoomUpdate::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RoomUpdate> RoomUpdate_default_instance_;

RoomUpdate* RoomUpdate::New(::google::protobuf::Arena* arena) const {
  RoomUpdate* n = new RoomUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RoomUpdate)
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
  if (GetArenaNoVirtual() == NULL && mapupdate_ != NULL) delete mapupdate_;
  mapupdate_ = NULL;
}

bool RoomUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RoomUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.PlayerList playerList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapUpdate;
        break;
      }

      // optional .Proto.Map mapUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_mapUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RoomUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RoomUpdate)
  return false;
#undef DO_
}

void RoomUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RoomUpdate)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerlist_, output);
  }

  // optional .Proto.Map mapUpdate = 2;
  if (this->has_mapupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mapupdate_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.RoomUpdate)
}

::google::protobuf::uint8* RoomUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RoomUpdate)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->playerlist_, false, target);
  }

  // optional .Proto.Map mapUpdate = 2;
  if (this->has_mapupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mapupdate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.RoomUpdate)
  return target;
}

size_t RoomUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RoomUpdate)
  size_t total_size = 0;

  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerlist_);
  }

  // optional .Proto.Map mapUpdate = 2;
  if (this->has_mapupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mapupdate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RoomUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RoomUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RoomUpdate)
    UnsafeMergeFrom(*source);
  }
}

void RoomUpdate::MergeFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RoomUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RoomUpdate::UnsafeMergeFrom(const RoomUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_playerlist()) {
    mutable_playerlist()->::Proto::PlayerList::MergeFrom(from.playerlist());
  }
  if (from.has_mapupdate()) {
    mutable_mapupdate()->::Proto::Map::MergeFrom(from.mapupdate());
  }
}

void RoomUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RoomUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RoomUpdate::IsInitialized() const {

  return true;
}

void RoomUpdate::Swap(RoomUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomUpdate::InternalSwap(RoomUpdate* other) {
  std::swap(playerlist_, other->playerlist_);
  std::swap(mapupdate_, other->mapupdate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomUpdate_descriptor_;
  metadata.reflection = RoomUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomUpdate

// optional .Proto.PlayerList playerList = 1;
bool RoomUpdate::has_playerlist() const {
  return this != internal_default_instance() && playerlist_ != NULL;
}
void RoomUpdate::clear_playerlist() {
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
}
const ::Proto::PlayerList& RoomUpdate::playerlist() const {
  // @@protoc_insertion_point(field_get:Proto.RoomUpdate.playerList)
  return playerlist_ != NULL ? *playerlist_
                         : *::Proto::PlayerList::internal_default_instance();
}
::Proto::PlayerList* RoomUpdate::mutable_playerlist() {
  
  if (playerlist_ == NULL) {
    playerlist_ = new ::Proto::PlayerList;
  }
  // @@protoc_insertion_point(field_mutable:Proto.RoomUpdate.playerList)
  return playerlist_;
}
::Proto::PlayerList* RoomUpdate::release_playerlist() {
  // @@protoc_insertion_point(field_release:Proto.RoomUpdate.playerList)
  
  ::Proto::PlayerList* temp = playerlist_;
  playerlist_ = NULL;
  return temp;
}
void RoomUpdate::set_allocated_playerlist(::Proto::PlayerList* playerlist) {
  delete playerlist_;
  playerlist_ = playerlist;
  if (playerlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomUpdate.playerList)
}

// optional .Proto.Map mapUpdate = 2;
bool RoomUpdate::has_mapupdate() const {
  return this != internal_default_instance() && mapupdate_ != NULL;
}
void RoomUpdate::clear_mapupdate() {
  if (GetArenaNoVirtual() == NULL && mapupdate_ != NULL) delete mapupdate_;
  mapupdate_ = NULL;
}
const ::Proto::Map& RoomUpdate::mapupdate() const {
  // @@protoc_insertion_point(field_get:Proto.RoomUpdate.mapUpdate)
  return mapupdate_ != NULL ? *mapupdate_
                         : *::Proto::Map::internal_default_instance();
}
::Proto::Map* RoomUpdate::mutable_mapupdate() {
  
  if (mapupdate_ == NULL) {
    mapupdate_ = new ::Proto::Map;
  }
  // @@protoc_insertion_point(field_mutable:Proto.RoomUpdate.mapUpdate)
  return mapupdate_;
}
::Proto::Map* RoomUpdate::release_mapupdate() {
  // @@protoc_insertion_point(field_release:Proto.RoomUpdate.mapUpdate)
  
  ::Proto::Map* temp = mapupdate_;
  mapupdate_ = NULL;
  return temp;
}
void RoomUpdate::set_allocated_mapupdate(::Proto::Map* mapupdate) {
  delete mapupdate_;
  mapupdate_ = mapupdate;
  if (mapupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomUpdate.mapUpdate)
}

inline const RoomUpdate* RoomUpdate::internal_default_instance() {
  return &RoomUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LobbyUpdate::kPlayerListFieldNumber;
const int LobbyUpdate::kRoomListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LobbyUpdate::LobbyUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LobbyUpdate)
}

void LobbyUpdate::InitAsDefaultInstance() {
  playerlist_ = const_cast< ::Proto::PlayerList*>(
      ::Proto::PlayerList::internal_default_instance());
  roomlist_ = const_cast< ::Proto::RoomList*>(
      ::Proto::RoomList::internal_default_instance());
}

LobbyUpdate::LobbyUpdate(const LobbyUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.LobbyUpdate)
}

void LobbyUpdate::SharedCtor() {
  playerlist_ = NULL;
  roomlist_ = NULL;
  _cached_size_ = 0;
}

LobbyUpdate::~LobbyUpdate() {
  // @@protoc_insertion_point(destructor:Proto.LobbyUpdate)
  SharedDtor();
}

void LobbyUpdate::SharedDtor() {
  if (this != &LobbyUpdate_default_instance_.get()) {
    delete playerlist_;
    delete roomlist_;
  }
}

void LobbyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUpdate_descriptor_;
}

const LobbyUpdate& LobbyUpdate::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LobbyUpdate> LobbyUpdate_default_instance_;

LobbyUpdate* LobbyUpdate::New(::google::protobuf::Arena* arena) const {
  LobbyUpdate* n = new LobbyUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LobbyUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LobbyUpdate)
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
  if (GetArenaNoVirtual() == NULL && roomlist_ != NULL) delete roomlist_;
  roomlist_ = NULL;
}

bool LobbyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LobbyUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.PlayerList playerList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomList;
        break;
      }

      // optional .Proto.RoomList roomList = 2;
      case 2: {
        if (tag == 18) {
         parse_roomList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LobbyUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LobbyUpdate)
  return false;
#undef DO_
}

void LobbyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LobbyUpdate)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerlist_, output);
  }

  // optional .Proto.RoomList roomList = 2;
  if (this->has_roomlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->roomlist_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.LobbyUpdate)
}

::google::protobuf::uint8* LobbyUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LobbyUpdate)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->playerlist_, false, target);
  }

  // optional .Proto.RoomList roomList = 2;
  if (this->has_roomlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->roomlist_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.LobbyUpdate)
  return target;
}

size_t LobbyUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LobbyUpdate)
  size_t total_size = 0;

  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerlist_);
  }

  // optional .Proto.RoomList roomList = 2;
  if (this->has_roomlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomlist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LobbyUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LobbyUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LobbyUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LobbyUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LobbyUpdate)
    UnsafeMergeFrom(*source);
  }
}

void LobbyUpdate::MergeFrom(const LobbyUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LobbyUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LobbyUpdate::UnsafeMergeFrom(const LobbyUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_playerlist()) {
    mutable_playerlist()->::Proto::PlayerList::MergeFrom(from.playerlist());
  }
  if (from.has_roomlist()) {
    mutable_roomlist()->::Proto::RoomList::MergeFrom(from.roomlist());
  }
}

void LobbyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LobbyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyUpdate::CopyFrom(const LobbyUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LobbyUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LobbyUpdate::IsInitialized() const {

  return true;
}

void LobbyUpdate::Swap(LobbyUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LobbyUpdate::InternalSwap(LobbyUpdate* other) {
  std::swap(playerlist_, other->playerlist_);
  std::swap(roomlist_, other->roomlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LobbyUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyUpdate_descriptor_;
  metadata.reflection = LobbyUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LobbyUpdate

// optional .Proto.PlayerList playerList = 1;
bool LobbyUpdate::has_playerlist() const {
  return this != internal_default_instance() && playerlist_ != NULL;
}
void LobbyUpdate::clear_playerlist() {
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
}
const ::Proto::PlayerList& LobbyUpdate::playerlist() const {
  // @@protoc_insertion_point(field_get:Proto.LobbyUpdate.playerList)
  return playerlist_ != NULL ? *playerlist_
                         : *::Proto::PlayerList::internal_default_instance();
}
::Proto::PlayerList* LobbyUpdate::mutable_playerlist() {
  
  if (playerlist_ == NULL) {
    playerlist_ = new ::Proto::PlayerList;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LobbyUpdate.playerList)
  return playerlist_;
}
::Proto::PlayerList* LobbyUpdate::release_playerlist() {
  // @@protoc_insertion_point(field_release:Proto.LobbyUpdate.playerList)
  
  ::Proto::PlayerList* temp = playerlist_;
  playerlist_ = NULL;
  return temp;
}
void LobbyUpdate::set_allocated_playerlist(::Proto::PlayerList* playerlist) {
  delete playerlist_;
  playerlist_ = playerlist;
  if (playerlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.LobbyUpdate.playerList)
}

// optional .Proto.RoomList roomList = 2;
bool LobbyUpdate::has_roomlist() const {
  return this != internal_default_instance() && roomlist_ != NULL;
}
void LobbyUpdate::clear_roomlist() {
  if (GetArenaNoVirtual() == NULL && roomlist_ != NULL) delete roomlist_;
  roomlist_ = NULL;
}
const ::Proto::RoomList& LobbyUpdate::roomlist() const {
  // @@protoc_insertion_point(field_get:Proto.LobbyUpdate.roomList)
  return roomlist_ != NULL ? *roomlist_
                         : *::Proto::RoomList::internal_default_instance();
}
::Proto::RoomList* LobbyUpdate::mutable_roomlist() {
  
  if (roomlist_ == NULL) {
    roomlist_ = new ::Proto::RoomList;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LobbyUpdate.roomList)
  return roomlist_;
}
::Proto::RoomList* LobbyUpdate::release_roomlist() {
  // @@protoc_insertion_point(field_release:Proto.LobbyUpdate.roomList)
  
  ::Proto::RoomList* temp = roomlist_;
  roomlist_ = NULL;
  return temp;
}
void LobbyUpdate::set_allocated_roomlist(::Proto::RoomList* roomlist) {
  delete roomlist_;
  roomlist_ = roomlist;
  if (roomlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.LobbyUpdate.roomList)
}

inline const LobbyUpdate* LobbyUpdate::internal_default_instance() {
  return &LobbyUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomList::kNumRoomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomList::RoomList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RoomList)
}

void RoomList::InitAsDefaultInstance() {
}

RoomList::RoomList(const RoomList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.RoomList)
}

void RoomList::SharedCtor() {
  numrooms_ = 0;
  _cached_size_ = 0;
}

RoomList::~RoomList() {
  // @@protoc_insertion_point(destructor:Proto.RoomList)
  SharedDtor();
}

void RoomList::SharedDtor() {
}

void RoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomList_descriptor_;
}

const RoomList& RoomList::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RoomList> RoomList_default_instance_;

RoomList* RoomList::New(::google::protobuf::Arena* arena) const {
  RoomList* n = new RoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RoomList)
  numrooms_ = 0;
}

bool RoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numRooms = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numrooms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RoomList)
  return false;
#undef DO_
}

void RoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RoomList)
  // optional int32 numRooms = 1;
  if (this->numrooms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numrooms(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.RoomList)
}

::google::protobuf::uint8* RoomList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RoomList)
  // optional int32 numRooms = 1;
  if (this->numrooms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numrooms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.RoomList)
  return target;
}

size_t RoomList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RoomList)
  size_t total_size = 0;

  // optional int32 numRooms = 1;
  if (this->numrooms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numrooms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RoomList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RoomList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RoomList)
    UnsafeMergeFrom(*source);
  }
}

void RoomList::MergeFrom(const RoomList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RoomList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RoomList::UnsafeMergeFrom(const RoomList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.numrooms() != 0) {
    set_numrooms(from.numrooms());
  }
}

void RoomList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomList::CopyFrom(const RoomList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RoomList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RoomList::IsInitialized() const {

  return true;
}

void RoomList::Swap(RoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomList::InternalSwap(RoomList* other) {
  std::swap(numrooms_, other->numrooms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomList_descriptor_;
  metadata.reflection = RoomList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomList

// optional int32 numRooms = 1;
void RoomList::clear_numrooms() {
  numrooms_ = 0;
}
::google::protobuf::int32 RoomList::numrooms() const {
  // @@protoc_insertion_point(field_get:Proto.RoomList.numRooms)
  return numrooms_;
}
void RoomList::set_numrooms(::google::protobuf::int32 value) {
  
  numrooms_ = value;
  // @@protoc_insertion_point(field_set:Proto.RoomList.numRooms)
}

inline const RoomList* RoomList::internal_default_instance() {
  return &RoomList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  _cached_size_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Proto.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo> PlayerInfo_default_instance_;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerInfo)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerInfo)
    UnsafeMergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlayerInfo::UnsafeMergeFrom(const PlayerInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  name_.Swap(&other->name_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional string name = 1;
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerInfo.name)
}
::std::string* PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Proto.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerInfo.name)
}

// optional int32 score = 2;
void PlayerInfo::clear_score() {
  score_ = 0;
}
::google::protobuf::int32 PlayerInfo::score() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerInfo.score)
  return score_;
}
void PlayerInfo::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerInfo.score)
}

inline const PlayerInfo* PlayerInfo::internal_default_instance() {
  return &PlayerInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.LoginResponse)
}

void LoginResponse::SharedCtor() {
  token_ = 0;
  _cached_size_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:Proto.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> LoginResponse_default_instance_;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoginResponse)
  token_ = 0;
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoginResponse)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoginResponse)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoginResponse)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoginResponse)
    UnsafeMergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoginResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginResponse::UnsafeMergeFrom(const LoginResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoginResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional int32 token = 1;
void LoginResponse::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:Proto.LoginResponse.token)
  return token_;
}
void LoginResponse::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginResponse.token)
}

inline const LoginResponse* LoginResponse::internal_default_instance() {
  return &LoginResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoardUpdate::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoardUpdate::BoardUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BoardUpdate)
}

void BoardUpdate::InitAsDefaultInstance() {
  map_ = const_cast< ::Proto::Map*>(
      ::Proto::Map::internal_default_instance());
}

BoardUpdate::BoardUpdate(const BoardUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.BoardUpdate)
}

void BoardUpdate::SharedCtor() {
  map_ = NULL;
  _cached_size_ = 0;
}

BoardUpdate::~BoardUpdate() {
  // @@protoc_insertion_point(destructor:Proto.BoardUpdate)
  SharedDtor();
}

void BoardUpdate::SharedDtor() {
  if (this != &BoardUpdate_default_instance_.get()) {
    delete map_;
  }
}

void BoardUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoardUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardUpdate_descriptor_;
}

const BoardUpdate& BoardUpdate::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoardUpdate> BoardUpdate_default_instance_;

BoardUpdate* BoardUpdate::New(::google::protobuf::Arena* arena) const {
  BoardUpdate* n = new BoardUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BoardUpdate)
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}

bool BoardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BoardUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.Map map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BoardUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BoardUpdate)
  return false;
#undef DO_
}

void BoardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BoardUpdate)
  // optional .Proto.Map map = 1;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.BoardUpdate)
}

::google::protobuf::uint8* BoardUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BoardUpdate)
  // optional .Proto.Map map = 1;
  if (this->has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.BoardUpdate)
  return target;
}

size_t BoardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BoardUpdate)
  size_t total_size = 0;

  // optional .Proto.Map map = 1;
  if (this->has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BoardUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoardUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoardUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BoardUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BoardUpdate)
    UnsafeMergeFrom(*source);
  }
}

void BoardUpdate::MergeFrom(const BoardUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BoardUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoardUpdate::UnsafeMergeFrom(const BoardUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_map()) {
    mutable_map()->::Proto::Map::MergeFrom(from.map());
  }
}

void BoardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BoardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardUpdate::CopyFrom(const BoardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BoardUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoardUpdate::IsInitialized() const {

  return true;
}

void BoardUpdate::Swap(BoardUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoardUpdate::InternalSwap(BoardUpdate* other) {
  std::swap(map_, other->map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoardUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoardUpdate_descriptor_;
  metadata.reflection = BoardUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoardUpdate

// optional .Proto.Map map = 1;
bool BoardUpdate::has_map() const {
  return this != internal_default_instance() && map_ != NULL;
}
void BoardUpdate::clear_map() {
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}
const ::Proto::Map& BoardUpdate::map() const {
  // @@protoc_insertion_point(field_get:Proto.BoardUpdate.map)
  return map_ != NULL ? *map_
                         : *::Proto::Map::internal_default_instance();
}
::Proto::Map* BoardUpdate::mutable_map() {
  
  if (map_ == NULL) {
    map_ = new ::Proto::Map;
  }
  // @@protoc_insertion_point(field_mutable:Proto.BoardUpdate.map)
  return map_;
}
::Proto::Map* BoardUpdate::release_map() {
  // @@protoc_insertion_point(field_release:Proto.BoardUpdate.map)
  
  ::Proto::Map* temp = map_;
  map_ = NULL;
  return temp;
}
void BoardUpdate::set_allocated_map(::Proto::Map* map) {
  delete map_;
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.BoardUpdate.map)
}

inline const BoardUpdate* BoardUpdate::internal_default_instance() {
  return &BoardUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerList::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerList::PlayerList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerList)
}

void PlayerList::InitAsDefaultInstance() {
}

PlayerList::PlayerList(const PlayerList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerList)
}

void PlayerList::SharedCtor() {
  _cached_size_ = 0;
}

PlayerList::~PlayerList() {
  // @@protoc_insertion_point(destructor:Proto.PlayerList)
  SharedDtor();
}

void PlayerList::SharedDtor() {
}

void PlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerList_descriptor_;
}

const PlayerList& PlayerList::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlayerList> PlayerList_default_instance_;

PlayerList* PlayerList::New(::google::protobuf::Arena* arena) const {
  PlayerList* n = new PlayerList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerList)
  playerinfo_.Clear();
}

bool PlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.PlayerInfo playerInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_playerInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerList)
  return false;
#undef DO_
}

void PlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerList)
  // repeated .Proto.PlayerInfo playerInfo = 1;
  for (unsigned int i = 0, n = this->playerinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.PlayerList)
}

::google::protobuf::uint8* PlayerList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerList)
  // repeated .Proto.PlayerInfo playerInfo = 1;
  for (unsigned int i = 0, n = this->playerinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->playerinfo(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerList)
  return target;
}

size_t PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerList)
  size_t total_size = 0;

  // repeated .Proto.PlayerInfo playerInfo = 1;
  {
    unsigned int count = this->playerinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerList)
    UnsafeMergeFrom(*source);
  }
}

void PlayerList::MergeFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlayerList::UnsafeMergeFrom(const PlayerList& from) {
  GOOGLE_DCHECK(&from != this);
  playerinfo_.MergeFrom(from.playerinfo_);
}

void PlayerList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerList::CopyFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlayerList::IsInitialized() const {

  return true;
}

void PlayerList::Swap(PlayerList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerList::InternalSwap(PlayerList* other) {
  playerinfo_.UnsafeArenaSwap(&other->playerinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerList_descriptor_;
  metadata.reflection = PlayerList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerList

// repeated .Proto.PlayerInfo playerInfo = 1;
int PlayerList::playerinfo_size() const {
  return playerinfo_.size();
}
void PlayerList::clear_playerinfo() {
  playerinfo_.Clear();
}
const ::Proto::PlayerInfo& PlayerList::playerinfo(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.playerInfo)
  return playerinfo_.Get(index);
}
::Proto::PlayerInfo* PlayerList::mutable_playerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.playerInfo)
  return playerinfo_.Mutable(index);
}
::Proto::PlayerInfo* PlayerList::add_playerinfo() {
  // @@protoc_insertion_point(field_add:Proto.PlayerList.playerInfo)
  return playerinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::PlayerInfo >*
PlayerList::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerList.playerInfo)
  return &playerinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::PlayerInfo >&
PlayerList::playerinfo() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerList.playerInfo)
  return playerinfo_;
}

inline const PlayerList* PlayerList::internal_default_instance() {
  return &PlayerList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameOver::kPlayerListFieldNumber;
const int GameOver::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameOver::GameOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameOver)
}

void GameOver::InitAsDefaultInstance() {
  playerlist_ = const_cast< ::Proto::PlayerList*>(
      ::Proto::PlayerList::internal_default_instance());
  map_ = const_cast< ::Proto::Map*>(
      ::Proto::Map::internal_default_instance());
}

GameOver::GameOver(const GameOver& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.GameOver)
}

void GameOver::SharedCtor() {
  playerlist_ = NULL;
  map_ = NULL;
  _cached_size_ = 0;
}

GameOver::~GameOver() {
  // @@protoc_insertion_point(destructor:Proto.GameOver)
  SharedDtor();
}

void GameOver::SharedDtor() {
  if (this != &GameOver_default_instance_.get()) {
    delete playerlist_;
    delete map_;
  }
}

void GameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOver_descriptor_;
}

const GameOver& GameOver::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameOver> GameOver_default_instance_;

GameOver* GameOver::New(::google::protobuf::Arena* arena) const {
  GameOver* n = new GameOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameOver)
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}

bool GameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.PlayerList playerList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // optional .Proto.Map map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameOver)
  return false;
#undef DO_
}

void GameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameOver)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->playerlist_, output);
  }

  // optional .Proto.Map map = 2;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->map_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.GameOver)
}

::google::protobuf::uint8* GameOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameOver)
  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->playerlist_, false, target);
  }

  // optional .Proto.Map map = 2;
  if (this->has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->map_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameOver)
  return target;
}

size_t GameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameOver)
  size_t total_size = 0;

  // optional .Proto.PlayerList playerList = 1;
  if (this->has_playerlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerlist_);
  }

  // optional .Proto.Map map = 2;
  if (this->has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameOver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameOver)
    UnsafeMergeFrom(*source);
  }
}

void GameOver::MergeFrom(const GameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameOver)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameOver::UnsafeMergeFrom(const GameOver& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_playerlist()) {
    mutable_playerlist()->::Proto::PlayerList::MergeFrom(from.playerlist());
  }
  if (from.has_map()) {
    mutable_map()->::Proto::Map::MergeFrom(from.map());
  }
}

void GameOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOver::CopyFrom(const GameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameOver)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameOver::IsInitialized() const {

  return true;
}

void GameOver::Swap(GameOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameOver::InternalSwap(GameOver* other) {
  std::swap(playerlist_, other->playerlist_);
  std::swap(map_, other->map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOver_descriptor_;
  metadata.reflection = GameOver_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameOver

// optional .Proto.PlayerList playerList = 1;
bool GameOver::has_playerlist() const {
  return this != internal_default_instance() && playerlist_ != NULL;
}
void GameOver::clear_playerlist() {
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) delete playerlist_;
  playerlist_ = NULL;
}
const ::Proto::PlayerList& GameOver::playerlist() const {
  // @@protoc_insertion_point(field_get:Proto.GameOver.playerList)
  return playerlist_ != NULL ? *playerlist_
                         : *::Proto::PlayerList::internal_default_instance();
}
::Proto::PlayerList* GameOver::mutable_playerlist() {
  
  if (playerlist_ == NULL) {
    playerlist_ = new ::Proto::PlayerList;
  }
  // @@protoc_insertion_point(field_mutable:Proto.GameOver.playerList)
  return playerlist_;
}
::Proto::PlayerList* GameOver::release_playerlist() {
  // @@protoc_insertion_point(field_release:Proto.GameOver.playerList)
  
  ::Proto::PlayerList* temp = playerlist_;
  playerlist_ = NULL;
  return temp;
}
void GameOver::set_allocated_playerlist(::Proto::PlayerList* playerlist) {
  delete playerlist_;
  playerlist_ = playerlist;
  if (playerlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.GameOver.playerList)
}

// optional .Proto.Map map = 2;
bool GameOver::has_map() const {
  return this != internal_default_instance() && map_ != NULL;
}
void GameOver::clear_map() {
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}
const ::Proto::Map& GameOver::map() const {
  // @@protoc_insertion_point(field_get:Proto.GameOver.map)
  return map_ != NULL ? *map_
                         : *::Proto::Map::internal_default_instance();
}
::Proto::Map* GameOver::mutable_map() {
  
  if (map_ == NULL) {
    map_ = new ::Proto::Map;
  }
  // @@protoc_insertion_point(field_mutable:Proto.GameOver.map)
  return map_;
}
::Proto::Map* GameOver::release_map() {
  // @@protoc_insertion_point(field_release:Proto.GameOver.map)
  
  ::Proto::Map* temp = map_;
  map_ = NULL;
  return temp;
}
void GameOver::set_allocated_map(::Proto::Map* map) {
  delete map_;
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.GameOver.map)
}

inline const GameOver* GameOver::internal_default_instance() {
  return &GameOver_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRequest::kLoginRequestFieldNumber;
const int ClientRequest::kCreateRoomFieldNumber;
const int ClientRequest::kJoinRoomFieldNumber;
const int ClientRequest::kQuitGameFieldNumber;
const int ClientRequest::kTileClickedFieldNumber;
const int ClientRequest::kTestRequestFieldNumber;
const int ClientRequest::kQuitRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRequest::ClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
  loginrequest_ = const_cast< ::Proto::LoginRequest*>(
      ::Proto::LoginRequest::internal_default_instance());
  createroom_ = const_cast< ::Proto::CreateRoomRequest*>(
      ::Proto::CreateRoomRequest::internal_default_instance());
  joinroom_ = const_cast< ::Proto::JoinRoomRequest*>(
      ::Proto::JoinRoomRequest::internal_default_instance());
  quitgame_ = const_cast< ::Proto::QuitGameRequest*>(
      ::Proto::QuitGameRequest::internal_default_instance());
  tileclicked_ = const_cast< ::Proto::TileClickedRequest*>(
      ::Proto::TileClickedRequest::internal_default_instance());
  testrequest_ = const_cast< ::Proto::TestRequest*>(
      ::Proto::TestRequest::internal_default_instance());
  quitroom_ = const_cast< ::Proto::QuitRoom*>(
      ::Proto::QuitRoom::internal_default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.ClientRequest)
}

void ClientRequest::SharedCtor() {
  loginrequest_ = NULL;
  createroom_ = NULL;
  joinroom_ = NULL;
  quitgame_ = NULL;
  tileclicked_ = NULL;
  testrequest_ = NULL;
  quitroom_ = NULL;
  _cached_size_ = 0;
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:Proto.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (this != &ClientRequest_default_instance_.get()) {
    delete loginrequest_;
    delete createroom_;
    delete joinroom_;
    delete quitgame_;
    delete tileclicked_;
    delete testrequest_;
    delete quitroom_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientRequest> ClientRequest_default_instance_;

ClientRequest* ClientRequest::New(::google::protobuf::Arena* arena) const {
  ClientRequest* n = new ClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ClientRequest)
  if (GetArenaNoVirtual() == NULL && loginrequest_ != NULL) delete loginrequest_;
  loginrequest_ = NULL;
  if (GetArenaNoVirtual() == NULL && createroom_ != NULL) delete createroom_;
  createroom_ = NULL;
  if (GetArenaNoVirtual() == NULL && joinroom_ != NULL) delete joinroom_;
  joinroom_ = NULL;
  if (GetArenaNoVirtual() == NULL && quitgame_ != NULL) delete quitgame_;
  quitgame_ = NULL;
  if (GetArenaNoVirtual() == NULL && tileclicked_ != NULL) delete tileclicked_;
  tileclicked_ = NULL;
  if (GetArenaNoVirtual() == NULL && testrequest_ != NULL) delete testrequest_;
  testrequest_ = NULL;
  if (GetArenaNoVirtual() == NULL && quitroom_ != NULL) delete quitroom_;
  quitroom_ = NULL;
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.LoginRequest loginRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createRoom;
        break;
      }

      // optional .Proto.CreateRoomRequest createRoom = 2;
      case 2: {
        if (tag == 18) {
         parse_createRoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_joinRoom;
        break;
      }

      // optional .Proto.JoinRoomRequest joinRoom = 3;
      case 3: {
        if (tag == 26) {
         parse_joinRoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quitGame;
        break;
      }

      // optional .Proto.QuitGameRequest quitGame = 4;
      case 4: {
        if (tag == 34) {
         parse_quitGame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitgame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tileClicked;
        break;
      }

      // optional .Proto.TileClickedRequest tileClicked = 5;
      case 5: {
        if (tag == 42) {
         parse_tileClicked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tileclicked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_testRequest;
        break;
      }

      // optional .Proto.TestRequest testRequest = 6;
      case 6: {
        if (tag == 50) {
         parse_testRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quitRoom;
        break;
      }

      // optional .Proto.QuitRoom quitRoom = 7;
      case 7: {
        if (tag == 58) {
         parse_quitRoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ClientRequest)
  // optional .Proto.LoginRequest loginRequest = 1;
  if (this->has_loginrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loginrequest_, output);
  }

  // optional .Proto.CreateRoomRequest createRoom = 2;
  if (this->has_createroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->createroom_, output);
  }

  // optional .Proto.JoinRoomRequest joinRoom = 3;
  if (this->has_joinroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->joinroom_, output);
  }

  // optional .Proto.QuitGameRequest quitGame = 4;
  if (this->has_quitgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quitgame_, output);
  }

  // optional .Proto.TileClickedRequest tileClicked = 5;
  if (this->has_tileclicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tileclicked_, output);
  }

  // optional .Proto.TestRequest testRequest = 6;
  if (this->has_testrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->testrequest_, output);
  }

  // optional .Proto.QuitRoom quitRoom = 7;
  if (this->has_quitroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->quitroom_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.ClientRequest)
}

::google::protobuf::uint8* ClientRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ClientRequest)
  // optional .Proto.LoginRequest loginRequest = 1;
  if (this->has_loginrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->loginrequest_, false, target);
  }

  // optional .Proto.CreateRoomRequest createRoom = 2;
  if (this->has_createroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->createroom_, false, target);
  }

  // optional .Proto.JoinRoomRequest joinRoom = 3;
  if (this->has_joinroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->joinroom_, false, target);
  }

  // optional .Proto.QuitGameRequest quitGame = 4;
  if (this->has_quitgame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quitgame_, false, target);
  }

  // optional .Proto.TileClickedRequest tileClicked = 5;
  if (this->has_tileclicked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tileclicked_, false, target);
  }

  // optional .Proto.TestRequest testRequest = 6;
  if (this->has_testrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->testrequest_, false, target);
  }

  // optional .Proto.QuitRoom quitRoom = 7;
  if (this->has_quitroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->quitroom_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.ClientRequest)
  return target;
}

size_t ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ClientRequest)
  size_t total_size = 0;

  // optional .Proto.LoginRequest loginRequest = 1;
  if (this->has_loginrequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loginrequest_);
  }

  // optional .Proto.CreateRoomRequest createRoom = 2;
  if (this->has_createroom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->createroom_);
  }

  // optional .Proto.JoinRoomRequest joinRoom = 3;
  if (this->has_joinroom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->joinroom_);
  }

  // optional .Proto.QuitGameRequest quitGame = 4;
  if (this->has_quitgame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quitgame_);
  }

  // optional .Proto.TileClickedRequest tileClicked = 5;
  if (this->has_tileclicked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tileclicked_);
  }

  // optional .Proto.TestRequest testRequest = 6;
  if (this->has_testrequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->testrequest_);
  }

  // optional .Proto.QuitRoom quitRoom = 7;
  if (this->has_quitroom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quitroom_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ClientRequest)
    UnsafeMergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ClientRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientRequest::UnsafeMergeFrom(const ClientRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_loginrequest()) {
    mutable_loginrequest()->::Proto::LoginRequest::MergeFrom(from.loginrequest());
  }
  if (from.has_createroom()) {
    mutable_createroom()->::Proto::CreateRoomRequest::MergeFrom(from.createroom());
  }
  if (from.has_joinroom()) {
    mutable_joinroom()->::Proto::JoinRoomRequest::MergeFrom(from.joinroom());
  }
  if (from.has_quitgame()) {
    mutable_quitgame()->::Proto::QuitGameRequest::MergeFrom(from.quitgame());
  }
  if (from.has_tileclicked()) {
    mutable_tileclicked()->::Proto::TileClickedRequest::MergeFrom(from.tileclicked());
  }
  if (from.has_testrequest()) {
    mutable_testrequest()->::Proto::TestRequest::MergeFrom(from.testrequest());
  }
  if (from.has_quitroom()) {
    mutable_quitroom()->::Proto::QuitRoom::MergeFrom(from.quitroom());
  }
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ClientRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientRequest::IsInitialized() const {

  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRequest::InternalSwap(ClientRequest* other) {
  std::swap(loginrequest_, other->loginrequest_);
  std::swap(createroom_, other->createroom_);
  std::swap(joinroom_, other->joinroom_);
  std::swap(quitgame_, other->quitgame_);
  std::swap(tileclicked_, other->tileclicked_);
  std::swap(testrequest_, other->testrequest_);
  std::swap(quitroom_, other->quitroom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// optional .Proto.LoginRequest loginRequest = 1;
bool ClientRequest::has_loginrequest() const {
  return this != internal_default_instance() && loginrequest_ != NULL;
}
void ClientRequest::clear_loginrequest() {
  if (GetArenaNoVirtual() == NULL && loginrequest_ != NULL) delete loginrequest_;
  loginrequest_ = NULL;
}
const ::Proto::LoginRequest& ClientRequest::loginrequest() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.loginRequest)
  return loginrequest_ != NULL ? *loginrequest_
                         : *::Proto::LoginRequest::internal_default_instance();
}
::Proto::LoginRequest* ClientRequest::mutable_loginrequest() {
  
  if (loginrequest_ == NULL) {
    loginrequest_ = new ::Proto::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.loginRequest)
  return loginrequest_;
}
::Proto::LoginRequest* ClientRequest::release_loginrequest() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.loginRequest)
  
  ::Proto::LoginRequest* temp = loginrequest_;
  loginrequest_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_loginrequest(::Proto::LoginRequest* loginrequest) {
  delete loginrequest_;
  loginrequest_ = loginrequest;
  if (loginrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.loginRequest)
}

// optional .Proto.CreateRoomRequest createRoom = 2;
bool ClientRequest::has_createroom() const {
  return this != internal_default_instance() && createroom_ != NULL;
}
void ClientRequest::clear_createroom() {
  if (GetArenaNoVirtual() == NULL && createroom_ != NULL) delete createroom_;
  createroom_ = NULL;
}
const ::Proto::CreateRoomRequest& ClientRequest::createroom() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.createRoom)
  return createroom_ != NULL ? *createroom_
                         : *::Proto::CreateRoomRequest::internal_default_instance();
}
::Proto::CreateRoomRequest* ClientRequest::mutable_createroom() {
  
  if (createroom_ == NULL) {
    createroom_ = new ::Proto::CreateRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.createRoom)
  return createroom_;
}
::Proto::CreateRoomRequest* ClientRequest::release_createroom() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.createRoom)
  
  ::Proto::CreateRoomRequest* temp = createroom_;
  createroom_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_createroom(::Proto::CreateRoomRequest* createroom) {
  delete createroom_;
  createroom_ = createroom;
  if (createroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.createRoom)
}

// optional .Proto.JoinRoomRequest joinRoom = 3;
bool ClientRequest::has_joinroom() const {
  return this != internal_default_instance() && joinroom_ != NULL;
}
void ClientRequest::clear_joinroom() {
  if (GetArenaNoVirtual() == NULL && joinroom_ != NULL) delete joinroom_;
  joinroom_ = NULL;
}
const ::Proto::JoinRoomRequest& ClientRequest::joinroom() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.joinRoom)
  return joinroom_ != NULL ? *joinroom_
                         : *::Proto::JoinRoomRequest::internal_default_instance();
}
::Proto::JoinRoomRequest* ClientRequest::mutable_joinroom() {
  
  if (joinroom_ == NULL) {
    joinroom_ = new ::Proto::JoinRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.joinRoom)
  return joinroom_;
}
::Proto::JoinRoomRequest* ClientRequest::release_joinroom() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.joinRoom)
  
  ::Proto::JoinRoomRequest* temp = joinroom_;
  joinroom_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_joinroom(::Proto::JoinRoomRequest* joinroom) {
  delete joinroom_;
  joinroom_ = joinroom;
  if (joinroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.joinRoom)
}

// optional .Proto.QuitGameRequest quitGame = 4;
bool ClientRequest::has_quitgame() const {
  return this != internal_default_instance() && quitgame_ != NULL;
}
void ClientRequest::clear_quitgame() {
  if (GetArenaNoVirtual() == NULL && quitgame_ != NULL) delete quitgame_;
  quitgame_ = NULL;
}
const ::Proto::QuitGameRequest& ClientRequest::quitgame() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.quitGame)
  return quitgame_ != NULL ? *quitgame_
                         : *::Proto::QuitGameRequest::internal_default_instance();
}
::Proto::QuitGameRequest* ClientRequest::mutable_quitgame() {
  
  if (quitgame_ == NULL) {
    quitgame_ = new ::Proto::QuitGameRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.quitGame)
  return quitgame_;
}
::Proto::QuitGameRequest* ClientRequest::release_quitgame() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.quitGame)
  
  ::Proto::QuitGameRequest* temp = quitgame_;
  quitgame_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_quitgame(::Proto::QuitGameRequest* quitgame) {
  delete quitgame_;
  quitgame_ = quitgame;
  if (quitgame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.quitGame)
}

// optional .Proto.TileClickedRequest tileClicked = 5;
bool ClientRequest::has_tileclicked() const {
  return this != internal_default_instance() && tileclicked_ != NULL;
}
void ClientRequest::clear_tileclicked() {
  if (GetArenaNoVirtual() == NULL && tileclicked_ != NULL) delete tileclicked_;
  tileclicked_ = NULL;
}
const ::Proto::TileClickedRequest& ClientRequest::tileclicked() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.tileClicked)
  return tileclicked_ != NULL ? *tileclicked_
                         : *::Proto::TileClickedRequest::internal_default_instance();
}
::Proto::TileClickedRequest* ClientRequest::mutable_tileclicked() {
  
  if (tileclicked_ == NULL) {
    tileclicked_ = new ::Proto::TileClickedRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.tileClicked)
  return tileclicked_;
}
::Proto::TileClickedRequest* ClientRequest::release_tileclicked() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.tileClicked)
  
  ::Proto::TileClickedRequest* temp = tileclicked_;
  tileclicked_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_tileclicked(::Proto::TileClickedRequest* tileclicked) {
  delete tileclicked_;
  tileclicked_ = tileclicked;
  if (tileclicked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.tileClicked)
}

// optional .Proto.TestRequest testRequest = 6;
bool ClientRequest::has_testrequest() const {
  return this != internal_default_instance() && testrequest_ != NULL;
}
void ClientRequest::clear_testrequest() {
  if (GetArenaNoVirtual() == NULL && testrequest_ != NULL) delete testrequest_;
  testrequest_ = NULL;
}
const ::Proto::TestRequest& ClientRequest::testrequest() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.testRequest)
  return testrequest_ != NULL ? *testrequest_
                         : *::Proto::TestRequest::internal_default_instance();
}
::Proto::TestRequest* ClientRequest::mutable_testrequest() {
  
  if (testrequest_ == NULL) {
    testrequest_ = new ::Proto::TestRequest;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.testRequest)
  return testrequest_;
}
::Proto::TestRequest* ClientRequest::release_testrequest() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.testRequest)
  
  ::Proto::TestRequest* temp = testrequest_;
  testrequest_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_testrequest(::Proto::TestRequest* testrequest) {
  delete testrequest_;
  testrequest_ = testrequest;
  if (testrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.testRequest)
}

// optional .Proto.QuitRoom quitRoom = 7;
bool ClientRequest::has_quitroom() const {
  return this != internal_default_instance() && quitroom_ != NULL;
}
void ClientRequest::clear_quitroom() {
  if (GetArenaNoVirtual() == NULL && quitroom_ != NULL) delete quitroom_;
  quitroom_ = NULL;
}
const ::Proto::QuitRoom& ClientRequest::quitroom() const {
  // @@protoc_insertion_point(field_get:Proto.ClientRequest.quitRoom)
  return quitroom_ != NULL ? *quitroom_
                         : *::Proto::QuitRoom::internal_default_instance();
}
::Proto::QuitRoom* ClientRequest::mutable_quitroom() {
  
  if (quitroom_ == NULL) {
    quitroom_ = new ::Proto::QuitRoom;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ClientRequest.quitRoom)
  return quitroom_;
}
::Proto::QuitRoom* ClientRequest::release_quitroom() {
  // @@protoc_insertion_point(field_release:Proto.ClientRequest.quitRoom)
  
  ::Proto::QuitRoom* temp = quitroom_;
  quitroom_ = NULL;
  return temp;
}
void ClientRequest::set_allocated_quitroom(::Proto::QuitRoom* quitroom) {
  delete quitroom_;
  quitroom_ = quitroom;
  if (quitroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.ClientRequest.quitRoom)
}

inline const ClientRequest* ClientRequest::internal_default_instance() {
  return &ClientRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitRoom::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitRoom::QuitRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitRoom)
}

void QuitRoom::InitAsDefaultInstance() {
}

QuitRoom::QuitRoom(const QuitRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.QuitRoom)
}

void QuitRoom::SharedCtor() {
  token_ = 0;
  _cached_size_ = 0;
}

QuitRoom::~QuitRoom() {
  // @@protoc_insertion_point(destructor:Proto.QuitRoom)
  SharedDtor();
}

void QuitRoom::SharedDtor() {
}

void QuitRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitRoom_descriptor_;
}

const QuitRoom& QuitRoom::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuitRoom> QuitRoom_default_instance_;

QuitRoom* QuitRoom::New(::google::protobuf::Arena* arena) const {
  QuitRoom* n = new QuitRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitRoom)
  token_ = 0;
}

bool QuitRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitRoom)
  return false;
#undef DO_
}

void QuitRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitRoom)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.QuitRoom)
}

::google::protobuf::uint8* QuitRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitRoom)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitRoom)
  return target;
}

size_t QuitRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitRoom)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuitRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitRoom)
    UnsafeMergeFrom(*source);
  }
}

void QuitRoom::MergeFrom(const QuitRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitRoom)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuitRoom::UnsafeMergeFrom(const QuitRoom& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void QuitRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRoom::CopyFrom(const QuitRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitRoom)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuitRoom::IsInitialized() const {

  return true;
}

void QuitRoom::Swap(QuitRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitRoom::InternalSwap(QuitRoom* other) {
  std::swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitRoom_descriptor_;
  metadata.reflection = QuitRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitRoom

// optional int32 token = 1;
void QuitRoom::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 QuitRoom::token() const {
  // @@protoc_insertion_point(field_get:Proto.QuitRoom.token)
  return token_;
}
void QuitRoom::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitRoom.token)
}

inline const QuitRoom* QuitRoom::internal_default_instance() {
  return &QuitRoom_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRequest::TestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TestRequest)
}

void TestRequest::InitAsDefaultInstance() {
}

TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TestRequest)
}

void TestRequest::SharedCtor() {
  token_ = 0;
  _cached_size_ = 0;
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:Proto.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
}

void TestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestRequest_descriptor_;
}

const TestRequest& TestRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestRequest> TestRequest_default_instance_;

TestRequest* TestRequest::New(::google::protobuf::Arena* arena) const {
  TestRequest* n = new TestRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TestRequest)
  token_ = 0;
}

bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TestRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TestRequest)
  return false;
#undef DO_
}

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TestRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TestRequest)
}

::google::protobuf::uint8* TestRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TestRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TestRequest)
  return target;
}

size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TestRequest)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TestRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TestRequest)
    UnsafeMergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TestRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestRequest::UnsafeMergeFrom(const TestRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TestRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestRequest::IsInitialized() const {

  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  std::swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestRequest_descriptor_;
  metadata.reflection = TestRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestRequest

// optional int32 token = 1;
void TestRequest::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 TestRequest::token() const {
  // @@protoc_insertion_point(field_get:Proto.TestRequest.token)
  return token_;
}
void TestRequest::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.TestRequest.token)
}

inline const TestRequest* TestRequest::internal_default_instance() {
  return &TestRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGameRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGameRequest::QuitGameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitGameRequest)
}

void QuitGameRequest::InitAsDefaultInstance() {
}

QuitGameRequest::QuitGameRequest(const QuitGameRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.QuitGameRequest)
}

void QuitGameRequest::SharedCtor() {
  token_ = 0;
  _cached_size_ = 0;
}

QuitGameRequest::~QuitGameRequest() {
  // @@protoc_insertion_point(destructor:Proto.QuitGameRequest)
  SharedDtor();
}

void QuitGameRequest::SharedDtor() {
}

void QuitGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitGameRequest_descriptor_;
}

const QuitGameRequest& QuitGameRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuitGameRequest> QuitGameRequest_default_instance_;

QuitGameRequest* QuitGameRequest::New(::google::protobuf::Arena* arena) const {
  QuitGameRequest* n = new QuitGameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitGameRequest)
  token_ = 0;
}

bool QuitGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitGameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitGameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitGameRequest)
  return false;
#undef DO_
}

void QuitGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitGameRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.QuitGameRequest)
}

::google::protobuf::uint8* QuitGameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitGameRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitGameRequest)
  return target;
}

size_t QuitGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitGameRequest)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitGameRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuitGameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitGameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitGameRequest)
    UnsafeMergeFrom(*source);
  }
}

void QuitGameRequest::MergeFrom(const QuitGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitGameRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuitGameRequest::UnsafeMergeFrom(const QuitGameRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void QuitGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGameRequest::CopyFrom(const QuitGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitGameRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuitGameRequest::IsInitialized() const {

  return true;
}

void QuitGameRequest::Swap(QuitGameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitGameRequest::InternalSwap(QuitGameRequest* other) {
  std::swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitGameRequest_descriptor_;
  metadata.reflection = QuitGameRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGameRequest

// optional int32 token = 1;
void QuitGameRequest::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 QuitGameRequest::token() const {
  // @@protoc_insertion_point(field_get:Proto.QuitGameRequest.token)
  return token_;
}
void QuitGameRequest::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitGameRequest.token)
}

inline const QuitGameRequest* QuitGameRequest::internal_default_instance() {
  return &QuitGameRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileClickedRequest::kTokenFieldNumber;
const int TileClickedRequest::kTileIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileClickedRequest::TileClickedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TileClickedRequest)
}

void TileClickedRequest::InitAsDefaultInstance() {
}

TileClickedRequest::TileClickedRequest(const TileClickedRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.TileClickedRequest)
}

void TileClickedRequest::SharedCtor() {
  ::memset(&token_, 0, reinterpret_cast<char*>(&tileindex_) -
    reinterpret_cast<char*>(&token_) + sizeof(tileindex_));
  _cached_size_ = 0;
}

TileClickedRequest::~TileClickedRequest() {
  // @@protoc_insertion_point(destructor:Proto.TileClickedRequest)
  SharedDtor();
}

void TileClickedRequest::SharedDtor() {
}

void TileClickedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileClickedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileClickedRequest_descriptor_;
}

const TileClickedRequest& TileClickedRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TileClickedRequest> TileClickedRequest_default_instance_;

TileClickedRequest* TileClickedRequest::New(::google::protobuf::Arena* arena) const {
  TileClickedRequest* n = new TileClickedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileClickedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TileClickedRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TileClickedRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TileClickedRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(token_, tileindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool TileClickedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TileClickedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tileIndex;
        break;
      }

      // optional int32 tileIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_tileIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TileClickedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TileClickedRequest)
  return false;
#undef DO_
}

void TileClickedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TileClickedRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // optional int32 tileIndex = 2;
  if (this->tileindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tileindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.TileClickedRequest)
}

::google::protobuf::uint8* TileClickedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TileClickedRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // optional int32 tileIndex = 2;
  if (this->tileindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tileindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.TileClickedRequest)
  return target;
}

size_t TileClickedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TileClickedRequest)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  // optional int32 tileIndex = 2;
  if (this->tileindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tileindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileClickedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TileClickedRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TileClickedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileClickedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TileClickedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TileClickedRequest)
    UnsafeMergeFrom(*source);
  }
}

void TileClickedRequest::MergeFrom(const TileClickedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TileClickedRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TileClickedRequest::UnsafeMergeFrom(const TileClickedRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.tileindex() != 0) {
    set_tileindex(from.tileindex());
  }
}

void TileClickedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TileClickedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileClickedRequest::CopyFrom(const TileClickedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TileClickedRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TileClickedRequest::IsInitialized() const {

  return true;
}

void TileClickedRequest::Swap(TileClickedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileClickedRequest::InternalSwap(TileClickedRequest* other) {
  std::swap(token_, other->token_);
  std::swap(tileindex_, other->tileindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileClickedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileClickedRequest_descriptor_;
  metadata.reflection = TileClickedRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileClickedRequest

// optional int32 token = 1;
void TileClickedRequest::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 TileClickedRequest::token() const {
  // @@protoc_insertion_point(field_get:Proto.TileClickedRequest.token)
  return token_;
}
void TileClickedRequest::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.TileClickedRequest.token)
}

// optional int32 tileIndex = 2;
void TileClickedRequest::clear_tileindex() {
  tileindex_ = 0;
}
::google::protobuf::int32 TileClickedRequest::tileindex() const {
  // @@protoc_insertion_point(field_get:Proto.TileClickedRequest.tileIndex)
  return tileindex_;
}
void TileClickedRequest::set_tileindex(::google::protobuf::int32 value) {
  
  tileindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.TileClickedRequest.tileIndex)
}

inline const TileClickedRequest* TileClickedRequest::internal_default_instance() {
  return &TileClickedRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomRequest::kTokenFieldNumber;
const int JoinRoomRequest::kRoomNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomRequest::JoinRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.JoinRoomRequest)
}

void JoinRoomRequest::InitAsDefaultInstance() {
}

JoinRoomRequest::JoinRoomRequest(const JoinRoomRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.JoinRoomRequest)
}

void JoinRoomRequest::SharedCtor() {
  ::memset(&token_, 0, reinterpret_cast<char*>(&roomnumber_) -
    reinterpret_cast<char*>(&token_) + sizeof(roomnumber_));
  _cached_size_ = 0;
}

JoinRoomRequest::~JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:Proto.JoinRoomRequest)
  SharedDtor();
}

void JoinRoomRequest::SharedDtor() {
}

void JoinRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomRequest_descriptor_;
}

const JoinRoomRequest& JoinRoomRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JoinRoomRequest> JoinRoomRequest_default_instance_;

JoinRoomRequest* JoinRoomRequest::New(::google::protobuf::Arena* arena) const {
  JoinRoomRequest* n = new JoinRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.JoinRoomRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinRoomRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinRoomRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(token_, roomnumber_);

#undef ZR_HELPER_
#undef ZR_

}

bool JoinRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.JoinRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomNumber;
        break;
      }

      // optional int32 roomNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_roomNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomnumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.JoinRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.JoinRoomRequest)
  return false;
#undef DO_
}

void JoinRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.JoinRoomRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // optional int32 roomNumber = 2;
  if (this->roomnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomnumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.JoinRoomRequest)
}

::google::protobuf::uint8* JoinRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.JoinRoomRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // optional int32 roomNumber = 2;
  if (this->roomnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomnumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.JoinRoomRequest)
  return target;
}

size_t JoinRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.JoinRoomRequest)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  // optional int32 roomNumber = 2;
  if (this->roomnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.JoinRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JoinRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.JoinRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.JoinRoomRequest)
    UnsafeMergeFrom(*source);
  }
}

void JoinRoomRequest::MergeFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.JoinRoomRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JoinRoomRequest::UnsafeMergeFrom(const JoinRoomRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.roomnumber() != 0) {
    set_roomnumber(from.roomnumber());
  }
}

void JoinRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomRequest::CopyFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JoinRoomRequest::IsInitialized() const {

  return true;
}

void JoinRoomRequest::Swap(JoinRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomRequest::InternalSwap(JoinRoomRequest* other) {
  std::swap(token_, other->token_);
  std::swap(roomnumber_, other->roomnumber_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomRequest_descriptor_;
  metadata.reflection = JoinRoomRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomRequest

// optional int32 token = 1;
void JoinRoomRequest::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 JoinRoomRequest::token() const {
  // @@protoc_insertion_point(field_get:Proto.JoinRoomRequest.token)
  return token_;
}
void JoinRoomRequest::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinRoomRequest.token)
}

// optional int32 roomNumber = 2;
void JoinRoomRequest::clear_roomnumber() {
  roomnumber_ = 0;
}
::google::protobuf::int32 JoinRoomRequest::roomnumber() const {
  // @@protoc_insertion_point(field_get:Proto.JoinRoomRequest.roomNumber)
  return roomnumber_;
}
void JoinRoomRequest::set_roomnumber(::google::protobuf::int32 value) {
  
  roomnumber_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinRoomRequest.roomNumber)
}

inline const JoinRoomRequest* JoinRoomRequest::internal_default_instance() {
  return &JoinRoomRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomRequest::CreateRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CreateRoomRequest)
}

void CreateRoomRequest::InitAsDefaultInstance() {
}

CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.CreateRoomRequest)
}

void CreateRoomRequest::SharedCtor() {
  token_ = 0;
  _cached_size_ = 0;
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:Proto.CreateRoomRequest)
  SharedDtor();
}

void CreateRoomRequest::SharedDtor() {
}

void CreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomRequest_descriptor_;
}

const CreateRoomRequest& CreateRoomRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateRoomRequest> CreateRoomRequest_default_instance_;

CreateRoomRequest* CreateRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateRoomRequest* n = new CreateRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CreateRoomRequest)
  token_ = 0;
}

bool CreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CreateRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CreateRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CreateRoomRequest)
  return false;
#undef DO_
}

void CreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CreateRoomRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.CreateRoomRequest)
}

::google::protobuf::uint8* CreateRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CreateRoomRequest)
  // optional int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CreateRoomRequest)
  size_t total_size = 0;

  // optional int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CreateRoomRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CreateRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CreateRoomRequest)
    UnsafeMergeFrom(*source);
  }
}

void CreateRoomRequest::MergeFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CreateRoomRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateRoomRequest::UnsafeMergeFrom(const CreateRoomRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void CreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {

  return true;
}

void CreateRoomRequest::Swap(CreateRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  std::swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomRequest_descriptor_;
  metadata.reflection = CreateRoomRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoomRequest

// optional int32 token = 1;
void CreateRoomRequest::clear_token() {
  token_ = 0;
}
::google::protobuf::int32 CreateRoomRequest::token() const {
  // @@protoc_insertion_point(field_get:Proto.CreateRoomRequest.token)
  return token_;
}
void CreateRoomRequest::set_token(::google::protobuf::int32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateRoomRequest.token)
}

inline const CreateRoomRequest* CreateRoomRequest::internal_default_instance() {
  return &CreateRoomRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kLoginFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ProtoMessages_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.LoginRequest)
}

void LoginRequest::SharedCtor() {
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:Proto.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_InitDefaults_ProtoMessages_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> LoginRequest_default_instance_;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoginRequest)
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.LoginRequest.login"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.LoginRequest.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoginRequest)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginRequest.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoginRequest)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginRequest.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoginRequest)
  size_t total_size = 0;

  // optional string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginRequest::UnsafeMergeFrom(const LoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  login_.Swap(&other->login_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string login = 1;
void LoginRequest::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::login() const {
  // @@protoc_insertion_point(field_get:Proto.LoginRequest.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginRequest.login)
}
void LoginRequest::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginRequest.login)
}
void LoginRequest::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginRequest.login)
}
::std::string* LoginRequest::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginRequest.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_login() {
  // @@protoc_insertion_point(field_release:Proto.LoginRequest.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginRequest.login)
}

// optional string password = 2;
void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:Proto.LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginRequest.password)
}
void LoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginRequest.password)
}
void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginRequest.password)
}
::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:Proto.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginRequest.password)
}

inline const LoginRequest* LoginRequest::internal_default_instance() {
  return &LoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
